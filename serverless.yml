service: migox-site-pages-rest-api
frameworkVersion: "3"
package:
  individually: false
plugins:
  - serverless-auto-swagger
  - serverless-offline
  - serverless-deployment-bucket
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  # deploymentMethod: direct
  httpApi:
    cors: true
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ap-south-1
  cfLogs: true
  logRetentionInDays: 1
  runtimeManagement: auto
  timeout: 30
  # profile: serverless-dev

  deploymentBucket:
    name: migox-site-pages-rest-api-${self:provider.stage}
    serverSideEncryption: AES256
    blockPublicAccess: false
  environment:
    SITE_PAGE_TABLE_NAME: Page-${self:provider.stage}
    PRELEMS_TABLE_NAME: Prelems-${self:provider.stage}
    STAGE: ${opt:stage, 'dev'}
    # X_AWS_ACCESS_KEY_ID: AKIAXYKJVUR7YBR24RFN
    # X_AWS_SECRET_ACCESS_KEY: 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
  cors:
    AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
    AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key, X-MIBAPI-CustomerType,X-MIBAPI-Trace-Id,X-MIBAPI-CustomerID,X-MIBAPI-Token,X-MIBAPI-Source,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    AllowOrigin: "'*'"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Page-${self:provider.stage}

        - Effect: Allow
          Action:
            - s3:PutObject
          Resource: arn:aws:s3:::${self:custom.PagesBucket.name}/*
        - Effect: Allow
          Action:
            - s3:PutBucketPolicy
          Resource:
            - !Sub arn:aws:s3:::${self:custom.PagesBucket.name}

resources:
  Resources:
    PagesTable: ${file(infra/resources/dynamodb.yml):PagesTable}
    PrelemsTable: ${file(infra/resources/dynamodb.yml):PrelemsTable}
    # PagesBucketPolicy: ${file(infra/resources/s3.yml):PagesBucketPolicy}
functions:
  health:
    handler: src/handlers/health.handler
    events:
      - httpApi:
          method: POST
          path: /${self:custom.stage}/health
          bodyType: "Pages"
          responses:
            201:
              description: "health Page response"
              bodyType: "Pages"
            500:
              description: "server error"
            400:
              description: "Bad Request"

  edit-page:
    handler: src/handlers/site-page/edit-page.handler
    events:
      - httpApi:
          method: PUT
          path: /${self:custom.stage}/create-page
          bodyType: "Page"
          responses:
            201:
              description: "Page User response"
              bodyType: "Users"
            500:
              description: "server error"
            400:
              description: "Bad Request"
  get-draft-page-modal:
    handler: src/handlers/site-page/fetchDraftPageModal.handler
    events:
      - httpApi:
          method: GET
          path: /${self:custom.stage}/site-page/{page}/{siteName}
          swaggerTags:
            - Page Info
          cors: true
          pathParameters:
            page:
              required: true
              type: string
              description: "Name of the path"
            siteName:
              required: true
              type: string
              description: "Name of the site"
          responses:
            200:
              description: "Draft Page response"
              bodyType: "IPageResponseModel"
            404:
              description: "Page Not found"
              bodyType: "IPageResponseModel"
            401:
              description: "Unauthorized"
              bodyType: "ResponseType"
            502:
              description: "server error"
              bodyType: "ResponseType"
            400:
              description: "Bad Request"
              bodyType: "ResponseType"

custom:
  stage: ${opt:stage, self:provider.stage}
  webpack:
    keepOutputDirectory: true
    includeModules:
      packagePath: "./package.json"
      forceExclude:
        - aws-sdk
    webpackConfig: "webpack.config.js"
    packager: "npm"
    excludeFiles: src/**/*.test.js
  autoSwagger:
    typefiles:
      - "./src/types/api-types.d.ts"
    host: "https://api.dev.migobucks.com"
    basePath: "/authorizer/"
    version: "1.0.0"
    useStage: true

  domains:
    dev: api.dev.migobucks.com
    sit: dev.api.sit.migobucks.com
    prod: api.migobucks.com
  PagesTable:
    name: !Ref PagesTable
    arn: !GetAtt PagesTable.Arn
  PagesBucket:
    name: migox-site-pages-rest-api-${self:provider.stage}
  # customDomain:
  #   domainName: ${self:custom.domains.${self:custom.stage}}
  #   basePath: 'authorizer'
  #   endpointType: regional
  #   apiType: http
  #   stage: dev
  #   createRoute53Record: true
